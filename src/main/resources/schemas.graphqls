type Query {
    cities: [City!]!
    buildings(city: String!): [Building!]!
    properties(email: String!): [Building!]!
}

type Mutation {
    register(email: String!, username: String!, password: String!): String
    updateRoom(room: RoomInput!): Room
    updateSuite(suite: SuiteInput!): Suite
    updateBuilding(building: BuildingInput!): Building
}

scalar Date

enum RoomType {
    BEDROOM,
    WASHROOM,
    KITCHEN,
    MASTER
}

type User {
    id: String!
    version: Int!
    name: String!
    email: String!
    password: String!
    lastLogin: Date!
    buildings: [Building!]!
}

type Building {
    id: String!
    version: Int!
    address: String!
    city: City!
    postalCode: String!
    owner: User!
    longitude: Float!
    latitude: Float!
    verified: Boolean!
    suites: [Suite!]!
}

input BuildingInput {
    id: String!
    version: Int!
    address: String!
    city: String!
    postalCode: String!
    owner: String!
    longitude: Float!
    latitude: Float!
    verified: Boolean!
    suites: [String!]!
}

type City {
    id: String!
    version: Int!
    name: String!
    buildings: [Building!]!
    longitude: Float!
    latitude: Float!
}

type Suite {
    id: String!
    version: Int!
    building: Building!
    rooms: [Room!]!
    floor: String!
    available: Int!
    name: String!
    rent: Int
    rentNegotiable: Boolean!
}

input SuiteInput {
    id: String!
    version: Int!
    building: String!
    rooms: [String!]!
    floor: String!
    available: Int!
    name: String!
    rent: Int
    rentNegotiable: Boolean!
}

type Room {
    id: String!
    version: Int!
    suite: Suite!
    name: String!
    comment: String!
    roomType: RoomType!
    rent: Int
    available: Int!
    publicSpace: Boolean!
}

input RoomInput {
    id: String!
    version: Int!
    suite: String!
    name: String!
    comment: String!
    roomType: RoomType!
    rent: Int
    available: Int!
    publicSpace: Boolean!
}
